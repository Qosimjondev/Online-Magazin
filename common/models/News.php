<?php

namespace common\models;

use yeesoft\multilingual\behaviors\MultilingualBehavior;
use yeesoft\multilingual\db\MultilingualLabelsTrait;
use yeesoft\multilingual\db\MultilingualQuery;
use Yii;
use yii\db\ActiveRecord;
use yii\web\UploadedFile;

/**
 * This is the model class for table "news".
 *
 * @property int $id
 * @property string|null $url
 * @property int|null $status
 * @property string|null $img
 * @property int|null $created_by
 *
 * @property User $createdBy
 * @property NewsLang[] $newsLangs
 */
class News extends ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    use MultilingualLabelsTrait;
    public static function tableName()
    {
        return 'news';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [

            [['title', 'content'], 'string'],
            [['status', 'created_by'], 'integer'],
            [['url'], 'string', 'max' => 255],
            ['img', 'file'],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['created_by' => 'id']],
        ];
    }

    public function behaviors()
    {
        return [
            'timestamp' => [

                'class' => 'yii\behaviors\TimestampBehavior',

                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],

            ],
            'multilingual' => [
                'class' => MultilingualBehavior::className(),
                'languages' => [
                    'uz' => 'Uzbek',
                    'ru' => 'Ruscha',
                    'en' => 'Inglizcha',
                ],
                'attributes' => [
                    'title',
                    'content',
                ]

            ]

        ];
    }

    public static function find()
    {
        $query = new MultilingualQuery(get_called_class());
        return $query->multilingual();
    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'url' => Yii::t('app', 'Url'),
            'status' => Yii::t('app', 'Status'),
            'img' => Yii::t('app', 'Img'),
            'created_by' => Yii::t('app', 'Created By'),
        ];
    }

    /**
     * Gets query for [[CreatedBy]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(User::class, ['id' => 'created_by']);
    }

    /**
     * Gets query for [[NewsLangs]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getNewsLangs()
    {
        return $this->hasMany(NewsLang::className(), ['owner_id' => 'id']);
    }

    /**
     * @throws \yii\base\Exception
     */
    public function save($runValidation = true, $attributeNames = null)
    {
        $this->img = UploadedFile::getInstance($this, 'img');

        if (!empty($this->img)) {

            $this->img->saveAs(Yii::getAlias('@frontend')."/web/img/blog/".$this->img->name, true);
            $this->created_by = Yii::$app->user->id;
            $this->url = Yii::$app->security->generateRandomString(6);

            return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
        }
        return false;
    }

    public function update($runValidation = true, $attributeNames = null)
    {
        $this->img = UploadedFile::getInstance($this, 'img');

        if(!empty($f)) {
            $this->img->saveAs(Yii::getAlias('@frontend')."/web/img/blog/".$this->img->name, true);
        }else{
            $this->img = $this->getOldAttribute('img');
        }
        return parent::update($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        parent::afterDelete();
        $img = Yii::getAlias('@frontend')."/web/img/blog/".$this->img;
        if (file_exists($img)){
            unlink($img);
        }
    }


    public function getImgLink(){
        return 'http://online/frontend/web/img/blog/'.$this->img;
    }


}
